// CareShare Database Schema for Neon PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth models for NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User model with role-based access
enum UserRole {
  FAMILY_MEMBER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(FAMILY_MEMBER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  familyMembers   FamilyMember[]
  createdFamilies Family[]   @relation("FamilyCreator")
  costs           Cost[]
  costSplits      CostSplit[]
  adminFamilies   AdminFamily[]
  assignedTasks   Task[]     @relation("AssignedTasks")
  orderedGifts    GiftOrder[] @relation("OrderedGifts")
  orderedFood     FoodOrder[] @relation("OrderedFood")
  messages        Message[]
  lifeStories     LifeStory[]
  medications     Medication[]
  notes           Note[]

  @@index([email])
}

// Family groups
model Family {
  id          String   @id @default(cuid())
  name        String
  description String?
  elderName   String?  // Name of the elderly person being cared for
  elderPhone  String?  // Contact phone number
  elderAddress String? // Physical address
  elderBirthday DateTime? // Birthday for reminders
  emergencyContact String? // Emergency contact info
  medicalNotes String?  // Medical notes/allergies
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  creator       User           @relation("FamilyCreator", fields: [createdBy], references: [id])
  members       FamilyMember[]
  events        Event[]
  costs         Cost[]
  adminFamilies AdminFamily[]
  tasks         Task[]
  careActivities CareActivity[]
  resources     Resource[]
  giftOrders    GiftOrder[]
  foodOrders    FoodOrder[]
  messages      Message[]
  lifeStories   LifeStory[]
  medications   Medication[]
  notes         Note[]

  @@index([createdBy])
}

// Junction table for Family-User relationship
enum FamilyRole {
  CARE_MANAGER    // Primary family member responsible for care coordination
  FAMILY_MEMBER   // Regular family member
}

model FamilyMember {
  id        String     @id @default(cuid())
  familyId  String
  userId    String
  role      FamilyRole @default(FAMILY_MEMBER)
  joinedAt  DateTime   @default(now())

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([familyId, userId])
  @@index([familyId])
  @@index([userId])
  @@index([role])
}

// Events (birthdays, appointments, food deliveries)
enum EventType {
  BIRTHDAY
  APPOINTMENT
  FOOD_DELIVERY
  VISIT
  OTHER
}

model Event {
  id          String    @id @default(cuid())
  familyId    String
  title       String
  description String?
  type        EventType
  eventDate   DateTime
  location    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@index([eventDate])
}

// Shared costs and contributions
enum CostStatus {
  PENDING
  PAID
  OVERDUE
}

model Cost {
  id          String     @id @default(cuid())
  familyId    String
  description String
  amount      Float
  status      CostStatus @default(PENDING)
  dueDate     DateTime?
  paidDate    DateTime?
  assignedTo  String?    // User assigned to pay this cost (deprecated - use splits)
  splitType   String     @default("EQUAL") // EQUAL, CUSTOM, SINGLE
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  family       Family     @relation(fields: [familyId], references: [id], onDelete: Cascade)
  assignedUser User?      @relation(fields: [assignedTo], references: [id])
  splits       CostSplit[]

  @@index([familyId])
  @@index([status])
  @@index([assignedTo])
}

// Individual cost splits for each family member
model CostSplit {
  id        String     @id @default(cuid())
  costId    String
  userId    String
  amount    Float
  status    CostStatus @default(PENDING)
  paidDate  DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  cost Cost @relation(fields: [costId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([costId])
  @@index([userId])
  @@index([status])
}

// Admin-Family relationship (for care providers managing multiple families)
model AdminFamily {
  id       String   @id @default(cuid())
  adminId  String
  familyId String
  addedAt  DateTime @default(now())

  admin  User   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([adminId, familyId])
  @@index([adminId])
  @@index([familyId])
}

// Tasks and to-dos
enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Task {
  id          String       @id @default(cuid())
  familyId    String
  title       String
  description String?
  priority    TaskPriority @default(MEDIUM)
  status      TaskStatus   @default(TODO)
  assignedTo  String?
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  family       Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  assignedUser User?  @relation("AssignedTasks", fields: [assignedTo], references: [id])

  @@index([familyId])
  @@index([assignedTo])
  @@index([status])
}

// Care Plan activities
model CareActivity {
  id          String   @id @default(cuid())
  familyId    String
  title       String
  description String?
  category    String   // medication, exercise, nutrition, social, medical
  frequency   String?  // daily, weekly, monthly
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@index([category])
}

// Resources and documents
model Resource {
  id          String   @id @default(cuid())
  familyId    String
  title       String
  description String?
  category    String   // document, link, contact, service
  url         String?
  fileUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@index([category])
}

// Gift marketplace orders
model GiftOrder {
  id          String   @id @default(cuid())
  familyId    String
  itemName    String
  description String?
  price       Float
  status      String   @default("pending") // pending, ordered, delivered
  orderedBy   String?
  orderDate   DateTime?
  deliveryDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  family      Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  orderedByUser User? @relation("OrderedGifts", fields: [orderedBy], references: [id])

  @@index([familyId])
  @@index([status])
}

// Food delivery orders
model FoodOrder {
  id           String   @id @default(cuid())
  familyId     String
  restaurant   String
  items        String   // JSON string of items
  totalAmount  Float
  status       String   @default("scheduled") // scheduled, ordered, delivered
  scheduledFor DateTime
  orderedBy    String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  family        Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  orderedByUser User?  @relation("OrderedFood", fields: [orderedBy], references: [id])

  @@index([familyId])
  @@index([status])
  @@index([scheduledFor])
}

// Family messages/communication
model Message {
  id        String   @id @default(cuid())
  familyId  String
  userId    String
  message   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@index([userId])
  @@index([createdAt])
}

// Life stories and memories
enum StoryCategory {
  CHILDHOOD
  FAMILY
  CAREER
  LIFE_WISDOM
  MILESTONE
  STORY
  JOURNAL
}

enum ContentType {
  TEXT
  PHOTO
  AUDIO
  VIDEO
  DOCUMENT
}

model LifeStory {
  id          String        @id @default(cuid())
  familyId    String
  userId      String
  title       String
  content     String        @db.Text
  category    StoryCategory
  contentType ContentType   @default(TEXT)
  year        Int?
  tags        String?       // Comma-separated tags
  visibility  String        @default("family") // family, private, public
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@index([userId])
  @@index([category])
  @@index([createdAt])
}

// Medication management
enum MedicationFrequency {
  ONCE_DAILY
  TWICE_DAILY
  THREE_TIMES_DAILY
  FOUR_TIMES_DAILY
  AS_NEEDED
  WEEKLY
  MONTHLY
  OTHER
}

model Medication {
  id           String               @id @default(cuid())
  familyId     String
  userId       String               // Person who added the medication
  name         String
  dosage       String
  frequency    MedicationFrequency
  timeOfDay    String?              // e.g., "8:00 AM, 8:00 PM"
  instructions String?              @db.Text
  prescribedBy String?              // Doctor name
  startDate    DateTime
  endDate      DateTime?
  refillDate   DateTime?
  pharmacy     String?
  notes        String?              @db.Text
  active       Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@index([userId])
  @@index([active])
}

// Care notes and updates
model Note {
  id        String   @id @default(cuid())
  familyId  String
  userId    String
  title     String?
  content   String   @db.Text
  category  String?  // health, care, observation, general
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@index([userId])
  @@index([createdAt])
  @@index([category])
}
