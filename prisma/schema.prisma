// CareShare Database Schema for Neon PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth models for NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User model with role-based access
enum UserRole {
  FAMILY_MEMBER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(FAMILY_MEMBER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  familyMembers FamilyMember[]
  createdFamilies Family[]   @relation("FamilyCreator")
  costs         Cost[]
  adminFamilies AdminFamily[]

  @@index([email])
}

// Family groups
model Family {
  id          String   @id @default(cuid())
  name        String
  description String?
  elderName   String?  // Name of the elderly person being cared for
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  creator       User           @relation("FamilyCreator", fields: [createdBy], references: [id])
  members       FamilyMember[]
  events        Event[]
  costs         Cost[]
  adminFamilies AdminFamily[]

  @@index([createdBy])
}

// Junction table for Family-User relationship
model FamilyMember {
  id        String   @id @default(cuid())
  familyId  String
  userId    String
  role      String   @default("member") // member, organizer
  joinedAt  DateTime @default(now())

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([familyId, userId])
  @@index([familyId])
  @@index([userId])
}

// Events (birthdays, appointments, food deliveries)
enum EventType {
  BIRTHDAY
  APPOINTMENT
  FOOD_DELIVERY
  VISIT
  OTHER
}

model Event {
  id          String    @id @default(cuid())
  familyId    String
  title       String
  description String?
  type        EventType
  eventDate   DateTime
  location    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@index([eventDate])
}

// Shared costs and contributions
enum CostStatus {
  PENDING
  PAID
  OVERDUE
}

model Cost {
  id          String     @id @default(cuid())
  familyId    String
  description String
  amount      Float
  status      CostStatus @default(PENDING)
  dueDate     DateTime?
  paidDate    DateTime?
  assignedTo  String?    // User assigned to pay this cost
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  family       Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  assignedUser User?  @relation(fields: [assignedTo], references: [id])

  @@index([familyId])
  @@index([status])
  @@index([assignedTo])
}

// Admin-Family relationship (for care providers managing multiple families)
model AdminFamily {
  id       String   @id @default(cuid())
  adminId  String
  familyId String
  addedAt  DateTime @default(now())

  admin  User   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([adminId, familyId])
  @@index([adminId])
  @@index([familyId])
}
